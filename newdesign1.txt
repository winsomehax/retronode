# RetroNode System Documentation

## Overview
RetroNode is a web application for managing retro games, platforms, and emulators. It provides a user-friendly interface for cataloging games, organizing them by platform, and configuring emulators for each platform.

## System Architecture

### Backend (Node.js/Express)
- **Server**: Express.js server handling API requests
- **Data Storage**: JSON files for games, platforms, and emulators
- **External APIs**: Integration with TheGamesDB, RAWG.io, Gemini AI, and GitHub GPT41

### Frontend
- **UI Framework**: HTML5 with Tailwind CSS for styling
- **JavaScript**: Vanilla JS with modular components
- **Icons**: Font Awesome
- **Fonts**: Orbitron (headings), Roboto (body text)

## Core Files

### Server
- `server.js`: Main Express server with API endpoints
- `.env`: Environment variables for API keys

### Data Storage
- `data/games.json`: Game catalog in object format with game IDs as keys
- `data/platforms.json`: Platform definitions
- `data/emulators.json`: Emulator configurations organized by platform

### Frontend
- `public/index.html`: Main games page
- `public/platforms.html`: Platforms management page
- `public/emulators.html`: Emulators overview page
- `public/js/app.js`: Core application logic
- `public/js/emulator-modal.js`: Emulator management modal
- `public/js/games-db-panel.js`: TheGamesDB search panel
- `public/js/rawg-panel.js`: RAWG.io search panel
- `public/js/gemini-window.js`: Gemini AI integration
- `public/css/retro-theme.css`: Main styling

## API Endpoints

### Games
- `GET /api/games`: List all games with optional filtering
- `GET /api/games/:id`: Get a specific game
- `POST /api/games`: Add a new game
- `PUT /api/games/:id`: Update a game
- `DELETE /api/games/:id`: Delete a game

### Platforms
- `GET /api/platforms`: List all platforms
- `GET /api/platforms/:id`: Get a specific platform
- `POST /api/platforms`: Add a new platform
- `PUT /api/platforms/:id`: Update a platform
- `DELETE /api/platforms/:id`: Delete a platform

### Emulators
- `GET /api/emulators`: List all emulators
- `GET /api/emulators/:platformId`: List emulators for a platform
- `POST /api/emulators`: Add a new emulator
- `PUT /api/emulators/:platformId/:emulatorId`: Update an emulator
- `DELETE /api/emulators/:platformId/:emulatorId`: Delete an emulator

### External APIs
- `GET /api/thegamesdb/games`: Search TheGamesDB for games
- `GET /api/thegamesdb/platforms`: Search TheGamesDB for platforms
- `GET /api/rawg/games`: Search RAWG.io for games
- `GET /api/rawg/games/:id`: Get game details from RAWG.io
- `GET /api/rawg/platforms`: Get platforms from RAWG.io
- `POST /api/gemini/game-description`: Generate game description with Gemini
- `POST /api/gemini/generate-overview`: Generate detailed game overview with Gemini
- `POST /api/github/deepseek`: Generate content with GitHub GPT41

### Settings
- `GET /api/settings/api-keys`: Get API keys
- `POST /api/settings/api-keys`: Update API keys

## Data Models

### Game
```json
{
  "title": "Game Title",
  "description": "Game description",
  "cover_image_path": "URL to cover image",
  "platforms": {
    "platform_id": "ROM path"
  }
}
```

### Platform
```json
{
  "platform_id": "unique-id",
  "name": "Platform Name",
  "manufacturer": "Manufacturer",
  "release_year": 1985,
  "description": "Platform description"
}
```

### Emulator
```json
{
  "emulator_id": "unique-id",
  "name": "Emulator Name",
  "command": "emulator %ROM%",
  "description": "Emulator description",
  "website": "https://emulator-website.com"
}
```

## UI Components

### Game Cards
- Display game title, cover image, description, and platforms
- Include edit and delete buttons
- Organized in a responsive grid layout

### Platform Cards
- Display platform name, manufacturer, release year, and description
- Include a list of configured emulators
- Feature an "Add Emulator" button
- Include edit and delete buttons

### Modals
1. **Game Modal**: Add/edit game details
2. **Platform Modal**: Add/edit platform details
3. **Emulator Modal**: Add/edit emulator details
4. **API Keys Modal**: Configure external API keys

### Search Panels
1. **TheGamesDB Panel**: Search and import games from TheGamesDB
2. **RAWG.io Panel**: Search and import games from RAWG.io

## Key Features

### Game Management
- Add, edit, and delete games
- Search and filter games by title or platform
- Sort games by title or platform
- Import game data from TheGamesDB or RAWG.io
- Generate game descriptions using AI (Gemini or GPT41)

### Platform Management
- Add, edit, and delete platforms
- Search platforms by name or manufacturer
- Import platform data from TheGamesDB

### Emulator Management
- Add, edit, and delete emulators for each platform
- Configure emulator commands with ROM path placeholders

### External API Integration
- TheGamesDB for game and platform data
- RAWG.io for game data
- Gemini AI for generating game descriptions
- GitHub GPT41 for generating detailed game information

## Implementation Details

### Game Card Layout
- Title below image for better visual hierarchy
- Left-aligned text for improved readability
- Platform names displayed under the title
- Description limited to 3 lines with ellipsis

### Platform Card Layout
- Platform details at the top
- Emulators section with add button
- List of configured emulators with edit buttons

### Modal Design
- Consistent styling with glow effects
- Form validation for required fields
- Cancel and save buttons
- Close button in the header

### API Integration
- Error handling for failed API requests
- Loading indicators during API calls
- Fallback for missing images or data

## Required API Keys
- TheGamesDB API Key
- RAWG.io API Key
- Gemini API Key
- GitHub PAT Token

## Setup Instructions
1. Clone the repository
2. Install dependencies with `npm install`
3. Create a `.env` file with required API keys
4. Start the server with `node server.js`
5. Access the application at http://localhost:3000