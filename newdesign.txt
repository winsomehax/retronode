# RetroNode - Retro Gaming Platform Manager

## Overview
RetroNode is a comprehensive management system for retro gaming, allowing users to organize their game collections across multiple platforms and emulators. The system provides a unified interface for cataloging games, managing platform information, configuring emulators, and launching games through appropriate emulators.

## Architecture

### Backend
The backend is built using Node.js with a simple HTTP server implementation. The application avoids using Express.js due to compatibility issues with the path-to-regexp library, instead opting for the native http module.

Key components:
- HTTP server for handling API requests and serving static files
- JSON file-based data storage for games, platforms, and emulators
- API endpoints for CRUD operations on games, platforms, and emulators
- External API proxies for TheGamesDB and Gemini AI integration

### Frontend
The frontend is built using vanilla JavaScript with Tailwind CSS for styling. The application follows a single-page application (SPA) pattern with client-side routing.

Key components:
- Responsive UI with a left sidebar for navigation and filtering
- Game grid display with cover images and details
- Modal dialogs for adding/editing games, platforms, and emulators
- Integration with external APIs for game data and AI-generated descriptions

## Data Structure

### Platforms
```json
{
  "platform_id": {
    "name": "Platform Name",
    "short_name": "Short Name",
    "manufacturer": "Manufacturer Name",
    "release_year": 1985,
    "description": "Platform description text",
    "image_url": "URL to platform image"
  }
}
```

### Emulators
```json
{
  "platform_id": [
    {
      "emulator_id": "emulator_name",
      "name": "Emulator Display Name",
      "command": "executable_command",
      "args": ["--arg1", "--arg2"],
      "description": "Emulator description",
      "version": "1.0.0"
    }
  ]
}
```

### Games
```json
[
  {
    "id": "unique_id",
    "title": "Game Title",
    "description": "Game description",
    "cover_image_path": "URL to cover image",
    "platforms": {
      "platform_id": "path/to/rom.ext"
    }
  }
]
```

## API Endpoints

### Games API
- `GET /api/games` - List all games with optional filtering and pagination
  - Query parameters:
    - `search`: Filter games by title or description
    - `platform`: Filter games by platform ID
    - `page`: Page number for pagination
    - `limit`: Number of items per page
  - Response: `{ success: true, data: [...games], totalItems, currentPage, totalPages }`

- `GET /api/games/:gameId` - Get a specific game by ID
  - Response: `{ success: true, data: game }`

- `POST /api/games` - Create a new game
  - Request body: `{ title, description, cover_image_path, platforms }`
  - Response: `{ success: true, data: newGame }`

- `PUT /api/games/:gameId` - Update an existing game
  - Request body: `{ title, description, cover_image_path, platforms }`
  - Response: `{ success: true, data: updatedGame }`

- `DELETE /api/games/:gameId` - Delete a game
  - Response: `{ success: true, data: {} }`

### Platforms API
- `GET /api/platforms` - List all platforms
  - Response: `{ success: true, data: platforms }`

- `GET /api/platforms/:platformId` - Get a specific platform
  - Response: `{ success: true, data: platform }`

- `POST /api/platforms` - Create a new platform
  - Request body: `{ platform_id, name, manufacturer, release_year, description }`
  - Response: `{ success: true, data: newPlatform }`

- `PUT /api/platforms/:platformId` - Update an existing platform
  - Request body: `{ name, manufacturer, release_year, description }`
  - Response: `{ success: true, data: updatedPlatform }`

- `DELETE /api/platforms/:platformId` - Delete a platform
  - Response: `{ success: true, data: {} }`

### Emulators API
- `GET /api/emulators` - List all emulators grouped by platform
  - Response: `{ success: true, data: emulators }`

- `GET /api/emulators/:platformId` - List emulators for a specific platform
  - Response: `{ success: true, data: platformEmulators }`

- `POST /api/emulators` - Create a new emulator
  - Request body: `{ platformId, emulator: { emulator_id, name, command, args, description, version } }`
  - Response: `{ success: true, data: newEmulator }`

- `PUT /api/emulators/:platformId/:emulatorId` - Update an existing emulator
  - Request body: `{ name, command, args, description, version }`
  - Response: `{ success: true, data: updatedEmulator }`

- `DELETE /api/emulators/:platformId/:emulatorId` - Delete an emulator
  - Response: `{ success: true, data: {} }`

### External API Proxies

#### TheGamesDB API
- `GET /api/thegamesdb/search` - Search for games in TheGamesDB
  - Query parameters:
    - `name`: Game name to search for
    - `fields`: Fields to include in the response (optional)
    - `include`: Additional data to include (optional)
  - Response format:
  ```json
  {
    "code": 200,
    "status": "Success",
    "data": {
      "count": 1,
      "games": [
        {
          "id": 1,
          "game_title": "Game Name",
          "release_date": "1990-01-01",
          "platform": 7,
          "overview": "Game description"
        }
      ]
    },
    "include": {
      "boxart": {
        "base_url": {
          "original": "https://url/to/images/",
          "small": "https://url/to/small/images/",
          "thumb": "https://url/to/thumb/images/",
          "cropped_center_thumb": "https://url/to/cropped/images/",
          "medium": "https://url/to/medium/images/",
          "large": "https://url/to/large/images/"
        },
        "data": {
          "1": [
            {
              "id": 1,
              "type": "boxart",
              "side": "front",
              "filename": "filename.jpg",
              "resolution": "300x450"
            }
          ]
        }
      },
      "platform": {
        "data": {
          "7": {
            "id": 7,
            "name": "Platform Name",
            "alias": "platform_alias"
          }
        }
      }
    }
  }
  ```

#### Gemini API
- `POST /api/gemini/generate-overview` - Generate game descriptions using Gemini AI
  - Request body:
  ```json
  {
    "contents": [
      {
        "parts": [
          {
            "text": "Generate a detailed description for a video game titled 'Game Title'"
          }
        ]
      }
    ]
  }
  ```
  - Response format:
  ```json
  {
    "candidates": [
      {
        "content": {
          "parts": [
            {
              "text": "Generated game description text"
            }
          ],
          "role": "model"
        },
        "finishReason": "STOP"
      }
    ]
  }
  ```

## UI Components

### Layout
- Left sidebar with navigation, filters, and stats
- Main content area for displaying games, platforms, or emulators
- Modal dialogs for adding/editing items

### Navigation
- Games section (default view)
- Platforms section
- Emulators section

### Filtering and Sorting
- Search input for filtering by title or description
- Platform dropdown for filtering by platform
- Sort options:
  - Title (A-Z)
  - Title (Z-A)
  - Platform (A-Z)
  - Platform (Z-A)

### Game Display
- Grid layout with responsive columns
- Game cards showing:
  - Cover image
  - Title
  - Description (truncated)
  - Platforms
  - Edit/delete buttons

### Platform Display
- List layout showing:
  - Platform name
  - Manufacturer
  - Release year
  - Description
  - Edit/delete buttons

### Emulator Display
- Table layout grouped by platform showing:
  - Emulator name
  - Command
  - Description
  - Edit/delete buttons

### Modal Dialogs
- Game dialog:
  - Title input
  - Description textarea
  - Cover image URL input
  - Platform selection
  - ROM path input
  - TheGamesDB search integration
  - Gemini AI description generation

- Platform dialog:
  - Platform ID input
  - Name input
  - Manufacturer input
  - Release year input
  - Description textarea

- Emulator dialog:
  - Emulator ID input
  - Name input
  - Command input
  - Arguments input
  - Description textarea
  - Version input

## Design Decisions

### Technology Stack
- **Node.js**: Chosen for its lightweight nature and JavaScript ecosystem compatibility
- **Native HTTP Module**: Used instead of Express.js due to compatibility issues with path-to-regexp
- **Tailwind CSS**: Selected for rapid UI development with utility classes
- **Vanilla JavaScript**: Used for frontend logic without additional frameworks to keep the application lightweight

### Data Storage
- **JSON Files**: Simple file-based storage for ease of development and deployment
- **In-Memory Data**: Data is loaded into memory on startup for fast access
- **Structured Data Model**: Clear separation between games, platforms, and emulators

### UI Design
- **Dark Theme**: Dark blue/slate color scheme for better visibility in low-light environments
- **Responsive Layout**: Adapts to different screen sizes
- **Left Sidebar**: Provides easy access to navigation, filtering, and sorting
- **Card-Based Game Display**: Visual representation of games with cover images
- **Modal Dialogs**: Clean interface for adding/editing items without page navigation

### External API Integration
- **TheGamesDB**: Used for fetching game metadata and cover images
- **Gemini AI**: Used for generating game descriptions
- **Backend Proxies**: APIs are proxied through the backend to avoid CORS issues and protect API keys

## Implementation Details

### Tailwind CSS Configuration
```javascript
tailwind.config = {
  theme: {
    extend: {
      colors: {
        primary: '#3b82f6',
        secondary: '#1d4ed8',
        accent: '#f59e0b',
        dark: '#0f172a',
      },
      fontSize: {
        base: '1.05rem',
      },
      fontFamily: {
        sans: ['Inter', 'system-ui', 'sans-serif'],
      },
    }
  }
}
```

### CSS Custom Classes
```css
.form-input {
  width: 100%;
  padding: 0.75rem;
  background-color: #1e293b;
  border: 1px solid #334155;
  border-radius: 0.375rem;
  color: #f1f5f9;
  margin-bottom: 1rem;
}

.form-select {
  width: 100%;
  padding: 0.75rem;
  background-color: #1e293b;
  border: 1px solid #334155;
  border-radius: 0.375rem;
  color: #f1f5f9;
  margin-bottom: 1rem;
}

.line-clamp-2 {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
}
```

### API Helper Functions
```javascript
// Search TheGamesDB for games
async function searchTheGamesDB(title) {
  try {
    const response = await fetch(`/api/thegamesdb/search?name=${encodeURIComponent(title)}`);
    const data = await response.json();
    
    if (data.status === "Success" && data.data && data.data.games) {
      // Transform the response to match our expected format
      const results = data.data.games.map(game => {
        const gameId = game.id.toString();
        const platformId = game.platform.toString();
        
        // Get boxart if available
        let boxartThumb = '';
        let boxartLarge = '';
        
        if (data.include && data.include.boxart) {
          const baseUrl = data.include.boxart.base_url;
          const boxartData = data.include.boxart.data[gameId];
          
          if (boxartData && boxartData.length > 0) {
            const filename = boxartData[0].filename;
            boxartThumb = baseUrl.thumb + filename;
            boxartLarge = baseUrl.medium + filename;
          }
        }
        
        // Get platform name if available
        let platformName = 'Unknown Platform';
        if (data.include && data.include.platform && data.include.platform.data[platformId]) {
          platformName = data.include.platform.data[platformId].name;
        }
        
        return {
          id: gameId,
          game_title: game.game_title,
          platform: platformId,
          platform_name: platformName,
          release_date: game.release_date,
          overview: game.overview,
          boxart_thumb_url: boxartThumb,
          boxart_large_url: boxartLarge
        };
      });
      
      return { success: true, results };
    } else {
      return { success: false, message: 'No results found' };
    }
  } catch (error) {
    console.error('Error searching TheGamesDB:', error);
    return { success: false, message: error.message };
  }
}

// Generate game description using Gemini API
async function generateGameDescription(title, genre) {
  try {
    const prompt = `Generate a detailed description for a video game titled "${title}"${genre ? ` in the ${genre} genre` : ''}. Include information about gameplay, features, and what makes it unique.`;
    
    const response = await fetch('/api/gemini/generate-overview', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: prompt
              }
            ]
          }
        ]
      })
    });
    
    const data = await response.json();
    
    if (data.candidates && data.candidates.length > 0) {
      const generatedText = data.candidates[0].content.parts[0].text;
      return { success: true, description: generatedText };
    } else {
      return { success: false, message: 'No description generated' };
    }
  } catch (error) {
    console.error('Error generating description:', error);
    return { success: false, message: error.message };
  }
}
```

## Future Enhancements

1. **Database Integration**: Replace JSON file storage with a proper database (MongoDB, SQLite) (unlikely)
2. **User Authentication**: Add user accounts and authentication (unlikely)
3. **Game Launching**: Implement functionality to launch games with configured emulators
4. **ROM Management**: Add ROM upload and management features
5. **Metadata Scraping**: Enhance integration with more external databases
6. **Custom Themes**: Allow users to customize the UI theme
7. **Game Collections**: Enable users to organize games into collections
8. **Statistics and Tracking**: Add gameplay time tracking and statistics
9. **Multi-Platform Support**: Package the application for desktop platforms

## Conclusion

RetroNode provides a comprehensive solution for managing retro game collections across multiple platforms. The application's modular architecture allows for easy extension and customization, while the clean and responsive UI provides an intuitive user experience. The integration with external APIs enhances the application's functionality by providing access to a vast database of game information and AI-generated content.